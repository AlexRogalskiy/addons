group 'io.testproject'
version '1.0'

apply plugin: 'java'

import groovy.json.*

// If necessary, update the location of TestProject SDK JAR file
def TP_SDK = 'io.testproject.sdk.java.jar'

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// Configurations
configurations {
    tpsdk
    compile.extendsFrom tpsdk
}

// JAR Task
jar {
    assert file("${TP_SDK}").exists(): "TestProject SDK JAR file was not found, please update the TP_SDK variable"

    def file = new File('src/main/resources/manifest.json')
    def json = new JsonSlurper().parseText(file.text)
    def version = json.version.toString()
    def versionParts = version.split('[.]')
    def revision = versionParts[versionParts.size() - 1].toInteger()
    versionParts[versionParts.size() - 1] = (revision + 1).toString()
    json.version = versionParts.join('.')

    def builder = new JsonBuilder(json)
    file.withWriter { writer ->
        writer.write(builder.toPrettyString())
    }

    archiveName "${rootProject.name}-${version}.jar"
    dependsOn configurations.runtime
    from {
        // Removes TestProject SDK from the final jar file
        (configurations.runtime - configurations.tpsdk).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    // Extract SDK version
    from {
        (configurations.tpsdk).collect {
            zipTree(it).matching {
                include 'testproject-sdk.properties'
            }
        }
    }

}

dependencies {
    tpsdk files("${TP_SDK}")
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntime 'org.junit.platform:junit-platform-runner:1.3.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testRuntime 'org.junit.vintage:junit-vintage-engine:5.3.1'
}

test {
    outputs.upToDateWhen {false}
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}
